apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
apply plugin: "com.facebook.react"

react {
    // Defaults are fine for RN 0.72.x
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    // Use compileSdk 33 for AGP 7.4.2 compatibility
    compileSdkVersion 33

    namespace "com.buzz20"

    defaultConfig {
        applicationId "com.buzz20"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // Resolve react-native-iap store flavor ambiguity
        missingDimensionStrategy 'store', 'play'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // Match IAP flavor dimension
    flavorDimensions "store"
    productFlavors {
        play { dimension "store" }
        // amazon { dimension "store" }
    }
}

dependencies {
    // This block forces all Google Play Services and Firebase libraries to use the same version,
    // which resolves the IncompatibleClassChangeError crash.
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                def requested = details.requested
                if (requested.group == 'com.google.android.gms' || requested.group == 'com.google.firebase') {
                    if (!requested.name.startsWith('react-native-firebase') && requested.name != 'firebase-core') {
                        details.useVersion '18.0.0'
                    }
                }
            }
        }
    }

    // React Native (version controlled by the RN Gradle Plugin)
    implementation("com.facebook.react:react-android")

    // Debug-only Flipper (FLIPPER_VERSION comes from gradle.properties)
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    // JS engine
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Firebase BOM + modules
    implementation platform('com.google.firebase:firebase-bom:32.5.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-functions'
    implementation 'com.google.firebase:firebase-messaging'

    // Maps / Location
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.maps.android:android-maps-utils:2.3.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    // UI / Support
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.facebook.fresco:fresco:2.6.0'
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:2.6.0'

    // Manual native module dependencies (autolinking not working)
    implementation project(':@react-native-async-storage_async-storage')
    implementation project(':@react-native-community_geolocation')
    implementation project(':@react-native-firebase_app')
    implementation project(':@react-native-firebase_auth')
    implementation project(':@react-native-firebase_firestore')
    implementation project(':@react-native-firebase_functions')
    implementation project(':@react-native-firebase_messaging')
    implementation project(':@react-native-google-signin_google-signin')
    implementation project(':react-native-iap')
    implementation project(':react-native-maps')
    implementation project(':react-native-permissions')
    implementation project(':react-native-push-notification')
    implementation project(':react-native-sound')
    implementation project(':react-native-tts')
}

// Autolink native modules
def googleServicesCandidates = [
    "src/play/debug/google-services.json",
    "src/debug/play/google-services.json",
    "src/play/google-services.json",
    "src/debug/google-services.json",
    "src/playDebug/google-services.json",
    "google-services.json"
]
def hasGoogleServicesJson = googleServicesCandidates.any { file(it).exists() }
if (hasGoogleServicesJson) {
    apply plugin: 'com.google.gms.google-services'
} else {
    logger.lifecycle("Google Services plugin skipped: no google-services.json found in :app")
}

// Provide default Gradle task alias so React Native CLI 'run-android' works without specifying --variant
// Map generic installDebug to the 'play' flavor to avoid task-name ambiguity
tasks.register("installDebug") {
    dependsOn("installPlayDebug")
}