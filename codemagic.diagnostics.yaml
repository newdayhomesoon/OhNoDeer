workflows:
  ci-diagnostics:
    name: "CI Diagnostics â€” build + asset & persistence checks"
    environment:
      vars:
        FIREBASE_API_KEY: ""
        FIREBASE_AUTH_DOMAIN: ""
        FIREBASE_PROJECT_ID: ""
        FIREBASE_STORAGE_BUCKET: ""
        FIREBASE_MESSAGING_SENDER_ID: ""
        FIREBASE_APP_ID: ""
    scripts:
      - name: Install dependencies
        script: |
          #!/bin/bash
          set -e
          echo "=== Installing node deps ==="
          npm ci
      - name: Inject Firebase config
        script: |
          #!/bin/bash
          set -e
          echo "Writing firebase config from env vars"
          cat > OrganizedCode/Storage/firebase/config.ts <<EOF
          export const firebaseConfig = {
            apiKey: '${FIREBASE_API_KEY}',
            authDomain: '${FIREBASE_AUTH_DOMAIN}',
            projectId: '${FIREBASE_PROJECT_ID}',
            storageBucket: '${FIREBASE_STORAGE_BUCKET}',
            messagingSenderId: '${FIREBASE_MESSAGING_SENDER_ID}',
            appId: '${FIREBASE_APP_ID}',
          };

          export function isPlaceholderFirebaseConfig(cfg = firebaseConfig) {
            return (!cfg.apiKey || cfg.apiKey === 'your-api-key');
          }
          export const firebaseConfigIsPlaceholder = isPlaceholderFirebaseConfig();
          EOF
      - name: Build Android debug
        script: |
          #!/bin/bash
          set -e
          cd android
          chmod +x gradlew
          ./gradlew assembleDebug -x lint
          cd ..
      - name: Inspect APK for drawables
        script: |
          #!/bin/bash
          set -e
          APK=$(find android/app/build/outputs -name "*-debug.apk" | head -n1)
          echo "Found APK: $APK"
          if [ -z "$APK" ]; then echo "APK not found"; exit 2; fi
          echo "Listing drawables from APK:" 
          unzip -l "$APK" | grep res/drawable || true
      - name: Capture app logs (if emulator available)
        script: |
          #!/bin/bash
          set -e
          echo "If an emulator is available, start it and run the app. This step will attempt to capture logcat for 20s."
          adb logcat -c || true
          adb logcat -v time | timeout 20s tee codemagic-logcat.txt &
      - name: Upload artifacts
        script: |
          #!/bin/bash
          set -e
          echo "Uploading artifacts (APK and logs)"
          ls -la android/app/build/outputs/apk/debug || true
          ls -la codemagic-logcat.txt || true
    artifacts:
      - android/app/build/outputs/apk/debug/*.apk
      - codemagic-logcat.txt
