workflows:
  android-build:
    name: Android Build
    environment:
      groups:
        - android-signing-key-release
      vars:
        REACT_NATIVE_VERSION: 0.72.17
        NODE_VERSION: 18.20.4
        NPM_CONFIG_LEGACY_PEER_DEPS: true
    scripts:
      - name: Set up Node.js
        script: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          npm config set legacy-peer-deps true
      - name: Clean up and Install dependencies
        script: |
          rm -rf node_modules
          rm -f package-lock.json
          rm -rf android/app/build
          rm -rf android/build
          rm -rf android/.gradle
          rm -rf .gradle
          rm -f android/app/src/main/assets/index.android.bundle
          npm cache clean --force
          npm cache verify
          npm install --legacy-peer-deps
      - name: Bundle JS for Android
        script: |
          mkdir -p android/app/src/main/assets
          echo "Creating bundle with entry file: index.js"
          echo "App name from app.json: $(cat app.json | grep -o '"name": "[^"]*"' | cut -d'"' -f4)"
          echo "Current directory: $(pwd)"

          # Verify entry file exists
          if [ ! -f index.js ]; then
            echo "ERROR: index.js not found!"
            ls -la
            exit 1
          fi

          # Verify App.tsx exists
          if [ ! -f App.tsx ]; then
            echo "ERROR: App.tsx not found!"
            ls -la
            exit 1
          fi

          echo "Entry files exist, creating bundle..."

          # Create bundle with explicit configuration
          NODE_OPTIONS="--max-old-space-size=4096" npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res \
            --reset-cache \
            --verbose

          # Verify bundle was created
          if [ -f android/app/src/main/assets/index.android.bundle ]; then
            echo "✅ Bundle created successfully"
            echo "Bundle size: $(stat -f%z android/app/src/main/assets/index.android.bundle 2>/dev/null || echo 'unknown')"
            ls -la android/app/src/main/assets/
          else
            echo "❌ ERROR: Bundle creation failed!"
            echo "Checking for any generated files..."
            find android/app/src/main/assets/ -name "*.bundle" 2>/dev/null || echo "No bundle files found"
            exit 1
          fi
      - name: Build Android Release
        script: |
          cd android
          chmod +x ./gradlew
          chmod +x ../node_modules/react-native/sdks/hermesc/osx-bin/hermesc || true
          ./gradlew --refresh-dependencies
          ./gradlew assemblePlayRelease
    artifacts:
      - android/app/build/outputs/**/*.apk

  diagnostics:
    name: CI Diagnostics
    environment:
      vars:
        FIREBASE_API_KEY:
          value: ""
          description: "Firebase API Key (set in Codemagic environment)"
        FIREBASE_AUTH_DOMAIN:
          value: ""
          description: "Firebase authDomain"
        FIREBASE_PROJECT_ID:
          value: ""
          description: "Firebase projectId"
        FIREBASE_STORAGE_BUCKET:
          value: ""
          description: "Firebase storageBucket"
        FIREBASE_MESSAGING_SENDER_ID:
          value: ""
          description: "Firebase messagingSenderId"
        FIREBASE_APP_ID:
          value: ""
          description: "Firebase appId"
    scripts:
      - name: Install dependencies
        script: |
          #!/bin/bash
          set -e
          echo "=== Installing node deps ==="
          npm ci
      - name: Inject Firebase config
        script: |
          #!/bin/bash
          set -e
          echo "Writing firebase config from env vars"
          mkdir -p OrganizedCode/Storage/firebase
          cat > OrganizedCode/Storage/firebase/config.ts <<EOF
          // Auto-generated by Codemagic diagnostics workflow
          export const firebaseConfig = {
            apiKey: '${FIREBASE_API_KEY}',
            authDomain: '${FIREBASE_AUTH_DOMAIN}',
            projectId: '${FIREBASE_PROJECT_ID}',
            storageBucket: '${FIREBASE_STORAGE_BUCKET}',
            messagingSenderId: '${FIREBASE_MESSAGING_SENDER_ID}',
            appId: '${FIREBASE_APP_ID}',
          };

          export function isPlaceholderFirebaseConfig(cfg = firebaseConfig) {
            return (!cfg.apiKey || cfg.apiKey === 'your-api-key');
          }
          export const firebaseConfigIsPlaceholder = isPlaceholderFirebaseConfig();
          EOF
      - name: Build Android debug
        script: |
          #!/bin/bash
          set -e
          cd android
          chmod +x gradlew
          ./gradlew assembleDebug -x lint
          cd ..
      - name: Inspect APK for drawables
        script: |
          #!/bin/bash
          set -e
          APK=$(find android/app/build/outputs -name "*-debug.apk" | head -n1)
          echo "Found APK: $APK"
          if [ -z "$APK" ]; then echo "APK not found"; exit 2; fi
          echo "Listing drawables from APK:" 
          unzip -l "$APK" | grep res/drawable || true
      - name: Capture app logs (if emulator available)
        script: |
          #!/bin/bash
          set -e
          echo "If an emulator is available, start it and run the app. This step will attempt to capture logcat for 20s."
          adb logcat -c || true
          adb logcat -v time | timeout 20s tee codemagic-logcat.txt &
      - name: Upload artifacts
        script: |
          #!/bin/bash
          set -e
          echo "Uploading artifacts (APK and logs)"
          ls -la android/app/build/outputs/apk/debug || true
          ls -la codemagic-logcat.txt || true
    publishing:
      artifacts:
        - android/app/build/outputs/apk/debug/*.apk
        - codemagic-logcat.txt
